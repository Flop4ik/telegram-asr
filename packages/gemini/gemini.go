package gemini

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/joho/godotenv"

	"google.golang.org/genai"
)

func RecognizeText(path string, recType string) (string, error) {

	var result string
	var promt string

	godotenv.Load()

	ctx := context.Background()
	client, err := genai.NewClient(ctx, &genai.ClientConfig{
		APIKey:  os.Getenv("GEMINI_KEY"),
		Backend: genai.BackendGeminiAPI,
	})
	if err != nil {
		log.Fatal(err)
	}
	myfile, err := client.Files.UploadFromPath(
		ctx,
		path,
		&genai.UploadFileConfig{
			MIMEType: "audio/ogg",
		},
	)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("myfile=%+v\n", myfile)

	switch recType {
	case "transcribe":
		promt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω–∑—É—Ä—É –≤ —Å–ª–æ–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∫–∞–∂—É—Ç—Å—è –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–º–∏"
	case "summarize":
		promt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω–∑—É—Ä—É –≤ —Å–ª–æ–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∫–∞–∂—É—Ç—Å—è –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–º–∏" + "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ù–ï –ü–ò–®–ò –ù–ò–ß–ï–ì–û –ü–ï–†–ï–î –ö–†–ê–¢–ö–ò–ú –°–û–î–ï–†–ñ–ê–ù–ò–ï–ú, –¢–û–õ–¨–ö–û –°–ê–ú–û –°–û–î–ï–†–ñ–ê–ù–ò–ï), –ø–∏—à–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º, –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—É–Ω–∫—Ç–æ–º <–ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞>., –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã ** –Ω–∏–≥–¥–µ –∫—Ä–æ–º–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ (–≤—ã–¥–µ–ª—è–π —Å–ª–æ–≤–∞ –∫–∞–∫ *—Å–ª–æ–≤–æ*).\n\n–û—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ ||| –ø–µ—Ä–µ–≤–æ–¥ –∑–≤—É–∫–∞ –≤ —Ç–µ–∫—Å—Ç. –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Å–∏–º–≤–æ–ª–∞ <--||--> –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç–∞–º–∏, –í–û–û–ë–©–ï –ù–ò–ß–ï–ì–û –ù–ï –ü–ò–®–ò –ö–†–û–ú–ï –≠–¢–û–ì–û\n\n–ù–ï –ü–ò–®–ò –ü–ï–†–ï–î –ö–†–ê–¢–ö–ò–ú –°–û–î–†–ï–ñ–ê–ù–ò–ï–ú –ù–ò–ß–ï–ì–û, –¢–û–õ–¨–ö–û –°–ê–ú –¢–ï–ö–°–¢!!!!!!!"
	default:
		promt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∫–∞–∫ –º–æ–∂–Ω–æ —Ç–æ—á–Ω–µ–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω–∑—É—Ä—É –≤ —Å–ª–æ–≤–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∫–∞–∂—É—Ç—Å—è –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–º–∏"
	}

	parts := []*genai.Part{
		genai.NewPartFromURI(myfile.URI, myfile.MIMEType),
		genai.NewPartFromText(promt),
	}

	contents := []*genai.Content{
		genai.NewContentFromParts(parts, "user"),
	}

	response, err := client.Models.GenerateContent(ctx, "gemini-1.5-flash", contents, nil)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
	}
	text := response.Text()
	fmt.Printf("r–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n%s\n", text)

	switch recType {
	case "transcribe":
		result = fmt.Sprintf("üé§ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n\n%s", text)
	case "summarize":
		splittedResponse := strings.Split(text, "|||")
		result = fmt.Sprintf("üéØ *–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:*\n\n%s\n\n\nüîç *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n\n%s", splittedResponse[0], splittedResponse[1])
	default:
		result = fmt.Sprintf("üé§ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n\n%s", text)

	}

	return result, nil
}
