package gemini

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/joho/godotenv"

	"google.golang.org/genai"
)

func RecognizeText(path string, recType string) (string, error) {

	var result string
	var promt string

	godotenv.Load()

	ctx := context.Background()
	client, err := genai.NewClient(ctx, &genai.ClientConfig{
		APIKey:  os.Getenv("GEMINI_KEY"),
		Backend: genai.BackendGeminiAPI,
	})
	if err != nil {
		log.Fatal(err)
	}
	myfile, err := client.Files.UploadFromPath(
		ctx,
		path,
		&genai.UploadFileConfig{
			MIMEType: "audio/ogg",
		},
	)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("myfile=%+v\n", myfile)

	switch recType {
	case "transcribe":
		promt = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ–≤–∞ –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏—Ö –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, —É–∫–∞–∑—ã–≤–∞—è —è–∑—ã–∫ –≤ —Å–∫–æ–±–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'hello [–∞–Ω–≥–ª–∏–π—Å–∫–∏–π]'). –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤, –∞ —Ç–æ–ª—å–∫–æ –∑–≤—É–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—É–∑—ã–∫–∞, —à—É–º, —Å–º–µ—Ö), —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏ –∑–≤—É–∫ 1-3 —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–µ—Å–Ω—è', '—Å–º–µ—Ö'), –∞ –∑–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å —Ñ—Ä–∞–∑—É: '–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ä–µ—á–∏.'. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω–∑—É—Ä—É –¥–ª—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–º–∏."
	case "summarize":
		promt = "–ó–∞–¥–∞—á–∞ 1: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ–≤–∞ –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏—Ö –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, —É–∫–∞–∑—ã–≤–∞—è —è–∑—ã–∫ –≤ —Å–∫–æ–±–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'hello [–∞–Ω–≥–ª–∏–π—Å–∫–∏–π]'). –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤, –∞ —Ç–æ–ª—å–∫–æ –∑–≤—É–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—É–∑—ã–∫–∞, —à—É–º, —Å–º–µ—Ö), —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏ –∑–≤—É–∫ 1-3 —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–µ—Å–Ω—è', '—Å–º–µ—Ö'), –∞ –∑–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å —Ñ—Ä–∞–∑—É: '–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ä–µ—á–∏.'. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω–∑—É—Ä—É –¥–ª—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–º–∏.\n\n–ó–∞–¥–∞—á–∞ 2: –ù–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ –ó–∞–¥–∞—á–∏ 1, –Ω–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –≤ –ó–∞–¥–∞—á–µ 1 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –±—ã–ª–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–≤—É–∫–∞ –∏ —Ñ—Ä–∞–∑–∞ '–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ä–µ—á–∏.', —Ç–æ –≤ –ó–∞–¥–∞—á–µ 2 –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–≤—É–∫–∞ (1-3 —Å–ª–æ–≤–∞) –∏ —Ñ—Ä–∞–∑—É '–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ä–µ—á–∏.'. –ù–ï –ü–ò–®–ò –ù–ò–ß–ï–ì–û –ü–ï–†–ï–î –ö–†–ê–¢–ö–ò–ú –°–û–î–ï–†–ñ–ê–ù–ò–ï–ú, –¢–û–õ–¨–ö–û –°–ê–ú–û –°–û–î–ï–†–ñ–ê–ù–ò–ï. –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∏–∑–ª–∞–≥–∞–π –ø–æ –ø—É–Ω–∫—Ç–∞–º, –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –ø—É–Ω–∫—Ç–æ–º <–ù–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞>, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–µ–Ω–∏–º–æ –∫ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã '**' –Ω–∏–≥–¥–µ, –∫—Ä–æ–º–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω—ã—Ö —Å–ª–æ–≤ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ (–≤—ã–¥–µ–ª—è–π —Å–ª–æ–≤–∞ –∫–∞–∫ *—Å–ª–æ–≤–æ*).\n\n–û—Ç–ø—Ä–∞–≤—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ –ó–∞–¥–∞—á–∏ 2] ||| [–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏–∑ –ó–∞–¥–∞—á–∏ 1]. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç —Ñ–æ—Ä–º–∞—Ç, –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ –º–µ–∂–¥—É —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º '|||' –ø–∏—Å–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ."
	default:
		promt = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π —ç—Ç—É –∞—É–¥–∏–æ–∑–∞–ø–∏—Å—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é. –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–æ–≤–∞ –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö, —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∏—Ö –Ω–∞ —è–∑—ã–∫–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, —É–∫–∞–∑—ã–≤–∞—è —è–∑—ã–∫ –≤ —Å–∫–æ–±–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'hello [–∞–Ω–≥–ª–∏–π—Å–∫–∏–π]'). –ï—Å–ª–∏ –≤ –∞—É–¥–∏–æ –Ω–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤, –∞ —Ç–æ–ª—å–∫–æ –∑–≤—É–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º—É–∑—ã–∫–∞, —à—É–º, —Å–º–µ—Ö), —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ–ø–∏—à–∏ –∑–≤—É–∫ 1-3 —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–µ—Å–Ω—è', '—Å–º–µ—Ö'), –∞ –∑–∞—Ç–µ–º –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å —Ñ—Ä–∞–∑—É: '–ù–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–µ–º—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ä–µ—á–∏.'. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ü–µ–Ω–∑—É—Ä—É –¥–ª—è —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω—ã–º–∏."
	}

	parts := []*genai.Part{
		genai.NewPartFromURI(myfile.URI, myfile.MIMEType),
		genai.NewPartFromText(promt),
	}

	contents := []*genai.Content{
		genai.NewContentFromParts(parts, "user"),
	}

	response, err := client.Models.GenerateContent(ctx, "gemini-1.5-flash", contents, nil)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
	}
	text := response.Text()
	fmt.Printf("r–†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n%s\n", text)

	switch recType {
	case "transcribe":
		result = fmt.Sprintf("üé§ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n\n%s", text)
	case "summarize":
		splittedResponse := strings.Split(text, "|||")
		result = fmt.Sprintf("üéØ *–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:*\n\n%s\n\n\nüîç *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n\n%s", splittedResponse[0], splittedResponse[1])
	default:
		result = fmt.Sprintf("üé§ *–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞:*\n\n%s", text)

	}

	return result, nil
}
