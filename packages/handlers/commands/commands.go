package handlers

import (
	"fmt"
	"log"

	db "github.com/Flop4ik/telegram-asr/packages/database"
	tg "gopkg.in/telebot.v4"
)

func StartCommand(c tg.Context) error {
	log.Printf("Received /start command from %s", c.Sender().Username)
	welcomeMessage := `
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TASR !* üé§

–ß—Ç–æ —Ç–∞–∫–æ–µ TASR? –≠—Ç–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç "Telegram AI Speech Recognition. ü§ñ

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç. üìù

–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ —Ç–µ–∫—Å—Ç, –±–µ–∑ telegram premium.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –µ–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. ‚ú®

*–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help.*
`

	db.CreateUser(c.Sender().ID)
	return c.Send(welcomeMessage, &tg.SendOptions{ParseMode: tg.ModeMarkdown})
}

func HelpCommand(c tg.Context) error {
	log.Printf("Received /help command from %s", c.Sender().Username)
	helpMessage := `
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TASR!*

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç! üìù

üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
2. –Ø –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä—É—é –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ —Ç–µ–∫—Å—Ç.

‚öôÔ∏è *–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:*
- –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–≤–æ–∂—É –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—Å—Ç (—Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è).
- –¢—ã –º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–æ–π /changemode.
- –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /mode.

üí¨ *–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–∫–µ–Ω—ã?*
- –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /tokens.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:*
1.  üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç.
    –°—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ç–æ–∫–µ–Ω –∑–∞ –∑–∞–ø—Ä–æ—Å.
2.  üìã –ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑: –Ø —Å–¥–µ–ª–∞—é –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∞—É–¥–∏–æ.
    –°—Ç–æ–∏–º–æ—Å—Ç—å: 1.2 —Ç–æ–∫–µ–Ω–∞ –∑–∞ –∑–∞–ø—Ä–æ—Å.

ü™ô *–¢–æ–∫–µ–Ω—ã:*
- –£ —Ç–µ–±—è –µ—Å—Ç—å *150 —Ç–æ–∫–µ–Ω–æ–≤* –≤ –¥–µ–Ω—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
- –†–µ–∂–∏–º –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Ç—Ä–∞—Ç–∏—Ç 15 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 1 –∞—É–¥–∏–æ.
- –†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ —Ç—Ä–∞—Ç–∏—Ç 10 —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ 1 –∞—É–¥–∏–æ.
- –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ä–∞–∑ –≤ –¥–µ–Ω—å.
- –¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.

‚ú® *–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É!*
`
	return c.Send(helpMessage, &tg.SendOptions{ParseMode: tg.ModeMarkdown})
}

func CheckTokens(c tg.Context) error {
	id := c.Sender().ID
	tokens, err := db.GetTokens(id)
	if err != nil {
		log.Printf("Failed to get tokens for user %d: %v", id, err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}

	message := `
ü™ô *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã*

–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å *%d –∏–∑ 150* —Ç–æ–∫–µ–Ω–æ–≤.

–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.
`
	return c.Send(fmt.Sprintf(message, tokens), &tg.SendOptions{ParseMode: tg.ModeMarkdown})
}

func CheckMode(c tg.Context) error {
	id := c.Sender().ID
	mode, err := db.GetMode(id)
	if err != nil {
		log.Printf("Failed to get mode for user %d: %v", id, err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	switch mode {
	case "transcribe":
		mode = "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"
	case "summarize":
		mode = "–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑"
	default:
		log.Printf("Unknown mode for user %d: %s", id, mode)
		return c.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	message := `
üõ†Ô∏è *–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã*
–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: *%s*.
–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /changemode.
`
	return c.Send(fmt.Sprintf(message, mode), &tg.SendOptions{ParseMode: tg.ModeMarkdown})
}

func ChangeMode(c tg.Context) error {
	id := c.Sender().ID
	mode, err := db.GetMode(id)
	if err != nil {
		log.Printf("Failed to get mode for user %d: %v", id, err)
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
	switch mode {
	case "transcribe":
		err = db.SetMode(id, "summarize")
		if err != nil {
			log.Printf("Failed to set mode for user %d: %v", id, err)
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
		return c.Send("‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *–ö—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑*.", &tg.SendOptions{ParseMode: tg.ModeMarkdown})
	case "summarize":
		err = db.SetMode(id, "transcribe")
		if err != nil {
			log.Printf("Failed to set mode for user %d: %v", id, err)
			return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
		return c.Send("‚úÖ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ *–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è*.", &tg.SendOptions{ParseMode: tg.ModeMarkdown})
	default:
		log.Printf("Unknown mode for user %d: %s", id, mode)
		return c.Send("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
	}
}
