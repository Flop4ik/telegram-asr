package handlers

import (
	"fmt"
	"log"
	"os"
	"path/filepath"
	"strconv"

	"github.com/Flop4ik/telegram-asr/packages/gemini"

	tg "gopkg.in/telebot.v4"
)

func OnVoice(c tg.Context, b *tg.Bot) error {

	if c.Message().Voice.Duration > 1200 {
		log.Printf("Voice message from %s exceeds 10 minutes, ignoring.", c.Sender().Username)
		return c.Send("–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–æ–π –¥–æ 10 –º–∏–Ω—É—Ç.")
	}

	fmt.Println("Received voice message")
	messageID := strconv.Itoa(int(c.Message().ID))

	currentDir, err := os.Getwd()
	if err != nil {
		log.Printf("Failed to get current working directory: %v", err)
		return c.Send("Failed to get current working directory.")
	}

	path := filepath.Join(currentDir, "tmp-voices", messageID+".ogg")

	log.Printf("Received voice message from %s", c.Sender().Username)

	b.Download(&c.Message().Voice.File, path)

	fmt.Println(path)

	result, err := gemini.RecognizeText(path)

	if err != nil {
		log.Printf("Error recognizing text: %v", err)
		return c.Send("Error recognizing text from the voice message.")
	}

	fmt.Println(path)
	if err := os.Remove(path); err != nil {
		log.Printf("Failed to delete file %s: %v", path, err)
	}

	return c.Send(result, &tg.SendOptions{ParseMode: tg.ModeMarkdown})
}

func StartCommand(c tg.Context) error {
	log.Printf("Received /start command from %s", c.Sender().Username)
	welcomeMessage := `
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TASR !* üé§

–ß—Ç–æ —Ç–∞–∫–æ–µ TASR? –≠—Ç–æ –∞–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç "Telegram ASR" (AI Speech Recognition). ü§ñ

–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç. üìù

–≠—Ç–æ—Ç –±–æ—Ç –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ —Ç–µ–∫—Å—Ç, –±–µ–∑ telegram premium

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –µ–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å. ‚ú®
`
	return c.Send(welcomeMessage, &tg.SendOptions{ParseMode: tg.ModeMarkdown})
}
